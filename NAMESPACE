# Generated by roxygen2: do not edit by hand

S3method(as.list,LASheader)
S3method(as.spatial,LAS)
S3method(as.spatial,LAScatalog)
S3method(cloud_metrics,LAS)
S3method(cloud_metrics,LAScluster)
S3method(grid_canopy,LAS)
S3method(grid_canopy,LAScatalog)
S3method(grid_canopy,LAScluster)
S3method(grid_metrics,LAS)
S3method(grid_metrics,LAScatalog)
S3method(grid_metrics,LAScluster)
S3method(grid_terrain,LAS)
S3method(grid_terrain,LAScatalog)
S3method(grid_terrain,LAScluster)
S3method(lascheck,LAS)
S3method(lascheck,LAScatalog)
S3method(lasclipCircle,LAS)
S3method(lasclipCircle,LAScatalog)
S3method(lasclipRectangle,LAS)
S3method(lasclipRectangle,LAScatalog)
S3method(lasdetectshape,LAS)
S3method(lasfilterdecimate,LAS)
S3method(lasfilterdecimate,LAScatalog)
S3method(lasfilterdecimate,LAScluster)
S3method(lasfilterduplicates,LAS)
S3method(lasfilterduplicates,LAScatalog)
S3method(lasfilterduplicates,LAScluster)
S3method(lasfiltersurfacepoints,LAS)
S3method(lasfiltersurfacepoints,LAScatalog)
S3method(lasfiltersurfacepoints,LAScluster)
S3method(lasground,LAS)
S3method(lasground,LAScatalog)
S3method(lasground,LAScluster)
S3method(lasmergespatial,LAS)
S3method(lasnormalize,LAS)
S3method(lasnormalize,LAScatalog)
S3method(lasnormalize,LAScluster)
S3method(lasrangecorrection,LAS)
S3method(lassnags,LAS)
S3method(lassnags,LAScatalog)
S3method(lassnags,LAScluster)
S3method(lastransform,LAS)
S3method(lastrees,LAS)
S3method(lasvoxelize,LAS)
S3method(lasvoxelize,LAScatalog)
S3method(lasvoxelize,LAScluster)
S3method(plot,lasmetrics3d)
S3method(point_metrics,LAS)
S3method(rbind,LAS)
S3method(readLAS,LAScatalog)
S3method(readLAS,LAScluster)
S3method(readLAS,character)
S3method(rumple_index,RasterLayer)
S3method(rumple_index,numeric)
S3method(sensor_tracking,LAS)
S3method(sensor_tracking,LAScatalog)
S3method(sensor_tracking,LAScluster)
S3method(tree_detection,LAS)
S3method(tree_detection,LAScatalog)
S3method(tree_detection,LAScluster)
S3method(tree_detection,RasterLayer)
S3method(tree_hulls,LAS)
S3method(tree_hulls,LAScatalog)
S3method(tree_hulls,LAScluster)
S3method(tree_metrics,LAS)
S3method(tree_metrics,LAScatalog)
S3method(tree_metrics,LAScluster)
export("epsg<-")
export("opt_chunk_alignment<-")
export("opt_chunk_buffer<-")
export("opt_chunk_size<-")
export("opt_cores<-")
export("opt_filter<-")
export("opt_laz_compression<-")
export("opt_output_files<-")
export("opt_progress<-")
export("opt_select<-")
export("opt_stop_early<-")
export("opt_wall_to_wall<-")
export("wkt<-")
export(.stdmetrics)
export(.stdmetrics_ctrl)
export(.stdmetrics_i)
export(.stdmetrics_pulse)
export(.stdmetrics_rn)
export(.stdmetrics_z)
export(.stdshapemetrics)
export(.stdtreemetrics)
export(LAD)
export(LAS)
export(LASheader)
export(VCI)
export(add_dtm3d)
export(add_flightlines3d)
export(add_treetops3d)
export(area)
export(as.spatial)
export(catalog)
export(catalog_apply)
export(catalog_intersect)
export(catalog_retile)
export(catalog_sapply)
export(catalog_select)
export(cloud_metrics)
export(csf)
export(dalponte2016)
export(density)
export(dsmtin)
export(entropy)
export(epsg)
export(forest.colors)
export(gap_fraction_profile)
export(get_lidr_threads)
export(grid_canopy)
export(grid_density)
export(grid_hexametrics)
export(grid_metrics)
export(grid_metrics3d)
export(grid_terrain)
export(height.colors)
export(hexbin_metrics)
export(highest)
export(homogenize)
export(is)
export(is.algorithm)
export(is.empty)
export(is.indexed)
export(is.overlapping)
export(is.parallelised)
export(knnidw)
export(kriging)
export(lasadddata)
export(lasaddextrabytes)
export(lasaddextrabytes_manual)
export(lascheck)
export(lasclip)
export(lasclipCircle)
export(lasclipPolygon)
export(lasclipRectangle)
export(lasdetectshape)
export(lasfilter)
export(lasfilterdecimate)
export(lasfilterduplicates)
export(lasfilterfirst)
export(lasfilterfirstlast)
export(lasfilterfirstofmany)
export(lasfilterground)
export(lasfilterlast)
export(lasfilternth)
export(lasfiltersingle)
export(lasfiltersurfacepoints)
export(lasflightline)
export(lasground)
export(lasmergespatial)
export(lasmetrics)
export(lasnormalize)
export(laspulse)
export(lasrangecorrection)
export(lasremoveextrabytes)
export(lasreoffset)
export(lasrescale)
export(lasscanline)
export(lassmooth)
export(lassnags)
export(lastransform)
export(lastrees)
export(lasunnormalize)
export(lasunsmooth)
export(lasvoxelize)
export(li2012)
export(lmf)
export(manual)
export(mcwatershed)
export(npoints)
export(opt_chunk_alignment)
export(opt_chunk_buffer)
export(opt_chunk_size)
export(opt_cores)
export(opt_filter)
export(opt_laz_compression)
export(opt_output_files)
export(opt_progress)
export(opt_select)
export(opt_stop_early)
export(opt_wall_to_wall)
export(p2r)
export(pastel.colors)
export(pitfree)
export(plot)
export(plot_dtm3d)
export(pmf)
export(point_metrics)
export(projection)
export(random)
export(random.colors)
export(readLAS)
export(readLAScatalog)
export(readLASheader)
export(rumple_index)
export(sensor_tracking)
export(set_lidr_threads)
export(shp_hplane)
export(shp_line)
export(shp_plane)
export(silva2016)
export(stdmetrics)
export(stdmetrics_ctrl)
export(stdmetrics_i)
export(stdmetrics_pulse)
export(stdmetrics_rn)
export(stdmetrics_z)
export(stdshapemetrics)
export(stdtreemetrics)
export(tin)
export(tree_detection)
export(tree_hulls)
export(tree_metrics)
export(util_makeZhangParam)
export(voxel_metrics)
export(watershed)
export(wing2015)
export(wkt)
export(writeLAS)
exportClasses(LAS)
exportClasses(LAScatalog)
exportClasses(LASheader)
exportMethods("$<-")
exportMethods("-")
exportMethods("[")
exportMethods("[[<-")
exportMethods("crs<-")
exportMethods("epsg<-")
exportMethods("projection<-")
exportMethods("wkt<-")
exportMethods(area)
exportMethods(crs)
exportMethods(density)
exportMethods(epsg)
exportMethods(extent)
exportMethods(npoints)
exportMethods(plot)
exportMethods(print)
exportMethods(projection)
exportMethods(summary)
exportMethods(wkt)
import(Rcpp)
import(data.table)
import(methods)
importClassesFrom(sp,CRS)
importClassesFrom(sp,Spatial)
importClassesFrom(sp,SpatialPolygonsDataFrame)
importFrom(data.table,":=")
importFrom(raster,"crs<-")
importFrom(raster,"projection<-")
importFrom(raster,crs)
importFrom(raster,projection)
importMethodsFrom(raster,area)
importMethodsFrom(raster,extent)
useDynLib(lidR, .registration = TRUE)
